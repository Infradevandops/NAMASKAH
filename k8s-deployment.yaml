# Kubernetes Production Deployment for Namaskah SMS
# Complete production-ready configuration with secrets, monitoring, and scaling

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: namaskah-prod
  labels:
    name: namaskah-prod
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: namaskah-config
  namespace: namaskah-prod
data:
  APP_NAME: "Namaskah SMS"
  APP_VERSION: "2.4.0"
  ENVIRONMENT: "production"
  DEBUG: "false"
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRE_MINUTES: "43200"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "30"
  REDIS_MAX_CONNECTIONS: "50"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "3600"
  TEXTVERIFIED_BASE_URL: "https://www.textverified.com"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: namaskah-secrets
  namespace: namaskah-prod
type: Opaque
stringData:
  SECRET_KEY: "REQUIRED_GENERATE_32_CHAR_SECRET_KEY"
  JWT_SECRET_KEY: "REQUIRED_GENERATE_32_CHAR_JWT_SECRET_KEY"
  DATABASE_URL: "postgresql://namaskah_user:REQUIRED_STRONG_DB_PASSWORD@postgres-service:5432/namaskah_prod?sslmode=require"
  REDIS_URL: "redis://redis-service:6379/0"
  TEXTVERIFIED_API_KEY: "REQUIRED_YOUR_TEXTVERIFIED_API_KEY"
  PAYSTACK_SECRET_KEY: "sk_live_REQUIRED_YOUR_PAYSTACK_LIVE_SECRET"
  PAYSTACK_PUBLIC_KEY: "pk_live_REQUIRED_YOUR_PAYSTACK_LIVE_PUBLIC"

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: namaskah-prod
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "namaskah_prod"
        - name: POSTGRES_USER
          value: "namaskah_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - namaskah_user
            - -d
            - namaskah_prod
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - namaskah_user
            - -d
            - namaskah_prod
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: namaskah-prod
type: Opaque
stringData:
  password: "REQUIRED_STRONG_DB_PASSWORD"

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: namaskah-prod
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: namaskah-prod
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: namaskah-prod
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: namaskah-prod
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: namaskah-prod
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: namaskah-app
  namespace: namaskah-prod
  labels:
    app: namaskah-app
    version: v2.4.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: namaskah-app
  template:
    metadata:
      labels:
        app: namaskah-app
        version: v2.4.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: app
        image: namaskah-app:2.4.0
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: namaskah-config
        - secretRef:
            name: namaskah-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /system/health/liveness
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /system/health/readiness
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1000

---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: namaskah-service
  namespace: namaskah-prod
  labels:
    app: namaskah-app
spec:
  selector:
    app: namaskah-app
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: namaskah-hpa
  namespace: namaskah-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: namaskah-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: namaskah-ingress
  namespace: namaskah-prod
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
spec:
  tls:
  - hosts:
    - api.namaskah.app
    secretName: namaskah-tls
  rules:
  - host: api.namaskah.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: namaskah-service
            port:
              number: 80

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: namaskah-network-policy
  namespace: namaskah-prod
spec:
  podSelector:
    matchLabels:
      app: namaskah-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: namaskah-pdb
  namespace: namaskah-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: namaskah-app

---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: namaskah-metrics
  namespace: namaskah-prod
  labels:
    app: namaskah-app
spec:
  selector:
    matchLabels:
      app: namaskah-app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s