#!/usr/bin/env python3
"""Setup production API keys and test connections"""

import os
import asyncio
import aiohttp
from typing import Dict, Any

class ProductionKeySetup:
    """Setup and validate production API keys."""
    
    def __init__(self):
        self.required_keys = {
            'TEXTVERIFIED_API_KEY': 'TextVerified API key',
            'PAYSTACK_SECRET_KEY': 'Paystack secret key (sk_live_...)',
            'PAYSTACK_PUBLIC_KEY': 'Paystack public key (pk_live_...)',
            'DATABASE_URL': 'Supabase database URL'
        }
    
    def check_current_keys(self) -> Dict[str, str]:
        """Check current environment variables."""
        status = {}
        for key, description in self.required_keys.items():
            value = os.getenv(key, 'NOT_SET')
            if 'test' in value.lower() or 'development' in value.lower():
                status[key] = f"❌ TEST KEY: {description}"
            elif value == 'NOT_SET':
                status[key] = f"❌ MISSING: {description}"
            else:
                status[key] = f"✅ SET: {description}"
        return status
    
    async def test_textverified_connection(self, api_key: str) -> bool:
        """Test TextVerified API connection."""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': f'Bearer {api_key}'}
                async with session.get(
                    'https://www.textverified.com/api/Users/balance',
                    headers=headers,
                    timeout=10
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"✅ TextVerified: Balance ${data.get('balance', 0)}")
                        return True
                    else:
                        print(f"❌ TextVerified: HTTP {response.status}")
                        return False
        except Exception as e:
            print(f"❌ TextVerified: {e}")
            return False
    
    async def test_paystack_connection(self, secret_key: str) -> bool:
        """Test Paystack API connection."""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': f'Bearer {secret_key}'}
                async with session.get(
                    'https://api.paystack.co/bank',
                    headers=headers,
                    timeout=10
                ) as response:
                    if response.status == 200:
                        print("✅ Paystack: Connection successful")
                        return True
                    else:
                        print(f"❌ Paystack: HTTP {response.status}")
                        return False
        except Exception as e:
            print(f"❌ Paystack: {e}")
            return False
    
    def generate_render_env_vars(self) -> str:
        """Generate environment variables for Render."""
        return """
# Add these to Render Environment Variables:

ENVIRONMENT=production
DATABASE_URL=postgresql://postgres:ryskyx-8Padsa-timtabodh@db.oegyaxxlzmogrtgmhrcy.supabase.co:5432/postgres
BASE_URL=https://namaskahsms.onrender.com
CORS_ORIGINS=https://namaskahsms.onrender.com

# Replace with your real keys:
TEXTVERIFIED_API_KEY=your_real_textverified_key
TEXTVERIFIED_EMAIL=your_email@domain.com
PAYSTACK_SECRET_KEY=sk_live_your_real_paystack_secret
PAYSTACK_PUBLIC_KEY=pk_live_your_real_paystack_public

# Auto-generated by Render:
SECRET_KEY=auto_generated_32_char_secret
JWT_SECRET_KEY=auto_generated_32_char_jwt_secret
"""
    
    async def run_setup(self):
        """Run complete setup process."""
        print("🔧 Production API Key Setup")
        print("=" * 40)
        
        # Check current status
        print("\n📋 Current Status:")
        status = self.check_current_keys()
        for key, msg in status.items():
            print(f"  {msg}")
        
        # Test connections if keys are available
        textverified_key = os.getenv('TEXTVERIFIED_API_KEY')
        paystack_key = os.getenv('PAYSTACK_SECRET_KEY')
        
        if textverified_key and 'test' not in textverified_key.lower():
            print("\n🔍 Testing TextVerified connection...")
            await self.test_textverified_connection(textverified_key)
        
        if paystack_key and 'test' not in paystack_key.lower():
            print("\n🔍 Testing Paystack connection...")
            await self.test_paystack_connection(paystack_key)
        
        # Generate Render config
        print("\n📝 Render Environment Variables:")
        print(self.generate_render_env_vars())
        
        print("\n🚀 Next Steps:")
        print("1. Get real API keys from TextVerified and Paystack")
        print("2. Add environment variables to Render dashboard")
        print("3. Redeploy application")
        print("4. Test SMS verification functionality")

async def main():
    setup = ProductionKeySetup()
    await setup.run_setup()

if __name__ == "__main__":
    asyncio.run(main())